world:
  height: 50  # the height of the world
  width: 50   # the height of the world
  step_time: 0.1  # 10Hz calculate each step
  sample_time: 0.1  # 10 Hz for render and data extraction 
  offset: [0, 0] # the offset of the world on x and y 

robots:
  type: 'robot_acker'  # # robot_omni, robot_diff, robot_acker
  number: 2

  # for multiple robots number>1
  # distribute: {mode: 'circular', shapes: [[4.6, 1.6, 3, 1.6]], circle: [25, 25, 10], random_bear: False, random_shape: False} 
  # distribute: {mode: 'random', rlow: [0, 0, 0, 0], rhigh: [50, 50, 3.14, 0], distance: 1}  # ackermann state 4 * 1
  distribute: {mode: 'manual', states: [[25, 25, 0, 0], [40, 35, 0, 0]], shapes: [[4.6, 1.6, 3, 1.6]], goals: [[27, 37, 0], [17, 42, 1]], random_bear: False}

  # sensor
  sensor: 
    - type: 'lidar'
      id: 0
      range_min: 0
      range_max: 15
      angle_range: 3.1415926
      number: 100
      noise: False
      std: 1  # index of the lidar 
      offset: [0, 0, 0]
      reso: 0.5

obstacles:
  - type: 'obstacle_circle'
    number: 2

    # distribute: {mode: 'random', shapes: [1.2], rlow: [0, 0], rhigh: [50, 50], distance: 2, random_shape: False, shapes_low: 0.1, shapes_high: 1} 
    distribute: {mode: 'manual', states: [[15, 21], [23, 41]], shapes: [5, 2]}  # shapes: radiuses 

    # dynamic: {sport: 'wander', sport_range: [0, 0, 10, 10], vel: 1.5}
    # dynamic: {sport: 'default', goals: [[42, 11], [19, 29]], vel: 3}
    # dynamic: {sport: 'partol', goals: [[4, 1], [9, 9]], vel: [1, 1]}  waiting for development
     

  - type: 'obstacle_polygon'
    number: 1
    distribute: {mode: 'manual', states: [[13, 23, 0], [15, 43, 0]], shapes: [ [[1, 2], [3, 1.5], [4, 3], [2, 4]] ]} 

  - type: 'obstacle_block'
    number: 2

    # shapes: [[length, width]]
    # distribute: {mode: 'random', rlow: [0.0, 0.0, -3.14], rhigh: [50.0, 50.0, 3.14], distance: 1, shapes: [[1, 4], [4, 5]], random_shape: True, shapes_low: [3, 3], shapes_high: [18, 18]}

    distribute: {mode: 'manual', states: [ [24, 34, 1], [43, 26, 0] ], shapes: [[5, 4], [3, 6]]}

